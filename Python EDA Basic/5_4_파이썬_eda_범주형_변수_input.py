# -*- coding: utf-8 -*-
"""5.4 파이썬 EDA-범주형 변수-input.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/166brnlYTKKmZIZflJkOq9Pb75MhINsji

## 라이브러리 로드
"""

# 데이터 분석을 위한 pandas 라이브러리를 불러옵니다.
# 수치계산을 위한 numpy를 불러옵니다.
# 데이터 시각화를 위한 matplotlib, seaborn 을 불러옵니다.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

print(pd.__version__)
print(sns.__version__)

# 0.11.0 버전에서 변화가 많으니 이 버전 이상을 사용해 주세요. 
# !pip install seaborn --upgrade

"""## 데이터셋 불러오기"""

# mpg 데이터셋을 불러옵니다.
df = sns.load_dataset("mpg")
df

"""## 데이터셋 일부만 가져오기"""

# head
df.head()

# tail
df.tail()

"""## 요약하기"""

df.info()

"""##  결측치 보기"""

df.isna().sum()

"""## 기술통계"""

# describe 를 통해 범주형 변수에 대한 기술통계를 보기
df.describe(include="object")

"""## 범주형 변수
### 범주형 데이터 유일값의 빈도수
"""

# nunique 값 구하기
df.nunique()

# countplot 으로 origin 빈도수 시각화 하기
sns.countplot(data = df, x = "origin")

"""### 1개 변수의 빈도수"""

# origin 의 빈도수 구하기
df["origin"].value_counts()

"""### 2개 이상의 변수에 대한 빈도수"""

# countplot 으로 origin 의 빈도수를 시각화 하고 cylinders 로 다른 색상으로 표현하기
sns.countplot(data=df, x="origin", hue = "cylinders")

# countplot 으로 cylinders 의 빈도수를 시각화 하고 origin 으로 다른 색상으로 표현하기
sns.countplot(data = df, x = "cylinders", hue = "origin")

# pd.crosstab 으로 시각화한 값 직접 구하기
pd.crosstab(df["origin"], df["cylinders"])

"""### 범주형 vs 수치형 변수"""

# barplot 으로 origin 별 mpg 값 구하기
sns.barplot(data=df, x="origin", y = "mpg", ci=None)

"""### groupby 를 통한 연산"""

# groupby를 통해 origin 별로 그룹화 하고 mpg 의 평균 구하기
df.groupby("origin")["mpg"]. mean()

"""### pivot table을 통한 연산"""

# pivot_table 로 같은 값 구하기
pd.pivot_table(data = df, index = "origin", values = "mpg")

# barplot 으로 합계 값 구하기
sns.barplot(data = df, x = "origin", y = "mpg", estimator=np.sum)

# barplot 에 hue 를 사용하여 색상을 다르게 표현해 보기
sns.barplot(data = df, x = "cylinders", y = "mpg",hue = "origin" )

# groupby 를 통해 위 시각화에 대한 값을 구하기
df.groupby(["cylinders", "origin"])["mpg"].mean().unstack()

# pivot_table 를 통해 위 시각화에 대한 값을 구하기
pd.pivot_table(data= df, index="cylinders", columns="origin", values="mpg")

# cylinders 와 mpg 의 x, hue 값을 변경해서 시각화
plt.figure(figsize = (10,4))
sns.barplot(data=df, x = "origin", y = "mpg", hue = "cylinders")

"""### boxplot과 사분위수

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Boxplot_vs_PDF.svg/1280px-Boxplot_vs_PDF.svg.png" width="300">

이미지 출처 : https://en.wikipedia.org/wiki/Box_plot
"""

# boxplot 으로 origin 별 mpg 의 기술통계 값 구하기
sns.boxplot(data=df, x = "origin", y = "mpg")

# groupby로 origin 값에 따른 mpg의 기술통계 구하기
# 결과를 변수에 할당하여 재사용하기
origin_desc = df.groupby("origin")["mpg"].describe()
origin_desc

"""### 박스플롯 이해하기
* https://ko.wikipedia.org/wiki/%EC%83%81%EC%9E%90_%EC%88%98%EC%97%BC_%EA%B7%B8%EB%A6%BC
"""

europe = origin_desc.loc["europe"]
europe

# IQR, 이상치를 제외한 최댓값, 최솟값 구하기
Q3 = europe["75%"]
Q1 = europe["25%"]
IQR = Q3 - Q1
OUT_MAX = Q3 + (1.5 * IQR)
OUT_MIN = Q1 - (1.5 * IQR)

# boxenplot 그리기
sns.boxenplot(data=df, x = "origin", y = "mpg")

# violinplot 그리기
sns.violinplot(data=df, x = "origin", y = "mpg")

"""### 산점도를 통한 범주형 데이터 표현"""

# scatterplot 으로 범주형 변수 그리기
sns.scatterplot(data = df, x = "origin", y = "mpg")

# stripplot
sns.stripplot(data = df, x = "origin", y = "mpg")

# swarmplot
plt.figure(figsize=(10, 4))
sns.swarmplot(data = df, x = "origin", y = "mpg", size = 4)

"""### catplot을 통한 범주형 데이터의 서브플롯 시각화
<img src="https://seaborn.pydata.org/_images/function_overview_8_0.png" width="500">
"""

# catplot
sns.catplot(data=df, x="origin", y="mpg", col="cylinders", col_wrap=3)

# catplot 으로 boxplot그리기
sns.catplot(data=df, x="origin", y="mpg", col="cylinders", col_wrap=3, kind = "box")

# catplot 으로 violinplot그리기
sns.catplot(data=df, x="origin", y="mpg", col="cylinders", col_wrap=3, kind = "violin")

# catplot 으로 countplot그리기
sns.catplot(data=df, y="origin",  col="cylinders", col_wrap=3, kind = "count")

# catplot 으로 boxplot그리기
# df 전체를 넣고 시각화 하기
sns.catplot(data=df, kind="box", aspect=3)

# catplot 으로 violinplot그리기
# df 전체를 넣고 시각화 하기
sns.catplot(data=df, kind="violin", aspect=3)

