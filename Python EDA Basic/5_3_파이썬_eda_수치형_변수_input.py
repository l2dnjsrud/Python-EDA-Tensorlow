# -*- coding: utf-8 -*-
"""5.3 파이썬 EDA-수치형 변수-input.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y1zKQyfUGTrjZKBE8YN0CLk_8vJBuAjN

## 라이브러리 로드
"""

# 데이터 분석을 위한 pandas 라이브러리를 불러옵니다.
# 수치계산을 위한 numpy를 불러옵니다.
# 데이터 시각화를 위한 matplotlib, seaborn 을 불러옵니다.
import pandas as pd
import numpy as np
import matplotlib. pyplot as plt
import seaborn as sns

print(pd.__version__)
print(sns.__version__)

# 0.11.0 버전에서 변화가 많으니 이 버전 이상을 사용해 주세요. 
# !pip install seaborn --upgrade

"""## 데이터셋 불러오기
<img src="https://pandas.pydata.org/docs/_images/02_io_readwrite.svg">

* seaborn 데이터셋 위치 : https://github.com/mwaskom/seaborn-data
"""

df = sns .load_dataset("mpg")
df .shape

"""## 데이터셋 일부만 가져오기"""

df.head()

df.tail()

"""## 요약하기"""

# info
df.info()

"""## 결측치 보기"""

df.isna(). sum()

df.isna().mean() * 100

"""## 기술통계 보기"""

df.describe()

df.describe(include="object")

"""## 히스토그램과 분포
* 히스토그램(histogram)은 표로 되어 있는 도수 분포를 정보 그림으로 나타낸 것
* 도수 분포(度數分布, frequency distribution) 또는 빈도분포는 표본의 다양한 산출 분포를 보여주는 목록, 표, 그래프
* 표에 들어가는 각 항목은 특정 그룹이나 주기 안에 값이 발생한 빈도나 횟수를 포함하고 있으며 이러한 방식으로 표는 표본 값의 분포를 요약
"""

# 수치형 변수 mpg의 unique 값 보기
df["mpg"].nunique()

# hist()를 통해 전체 수치변수에 대한 히스토그램 그리기
_ = df.hist(figsize = (10 , 8), bins = 50)

"""### 비대칭도(왜도)
* 실수 값 확률 변수의 확률 분포 비대칭성을 나타내는 지표
* 왜도의 값은 양수나 음수가 될 수 있으며 정의되지 않을 수도 있음
* 왜도가 음수일 경우에는 확률밀도함수의 왼쪽 부분에 긴 꼬리를 가지며 중앙값을 포함한 자료가 오른쪽에 더 많이 분포
* 왜도가 양수일 때는 확률밀도함수의 오른쪽 부분에 긴 꼬리를 가지며 자료가 왼쪽에 더 많이 분포
* 평균과 중앙값이 같으면 왜도는 0

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Negative_and_positive_skew_diagrams_%28English%29.svg/700px-Negative_and_positive_skew_diagrams_%28English%29.svg.png" width="300">

출처 : https://ko.wikipedia.org/wiki/%EB%B9%84%EB%8C%80%EC%B9%AD%EB%8F%84
"""

# skew를 통해 전체 수치변수에 대한 왜도 구하기
df.skew()

"""### 첨도 
* 확률분포의 뾰족한 정도를 나타내는 척도
* 관측치들이 어느 정도 집중적으로 중심에 몰려 있는가를 측정할 때 사용
* 첨도값(K)이 3에 가까우면 산포도가 정규분포에 가까움
* 3보다 작을 경우에는(K<3) 산포는 정규분포보다 더 뾰족한 분포(꼬리가 얇은 분포)
* 첨도값이 3보다 큰 양수이면(K>3) 정규분포보다 더 완만한 납작한 분포(꼬리가 두꺼운 분포)

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Normal_Distribution_PDF.svg/1920px-Normal_Distribution_PDF.svg.png" width="300">

출처 : https://ko.wikipedia.org/wiki/%EC%B2%A8%EB%8F%84
"""

# kurt를 통해 전체 수치변수에 대한 첨도 구하기
df.kurt()

"""### 1개의 수치변수


<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Boxplot_vs_PDF.svg/1280px-Boxplot_vs_PDF.svg.png" width="300">

이미지 출처 : https://en.wikipedia.org/wiki/Box_plot
"""

# displot을 통해 히스토그램과 kdeplot 그리기
sns.displot(data = df, x= "mpg", kde = "True", rug = "true")

# kdeplot, rugplot으로 밀도함수 표현하기
sns.kdeplot(data = df, x = "mpg", shade = "ture", cut = 10)
sns.rugplot(data = df, x = "mpg")

# mpg 값에 대해 agg로 skew, kurt 값 구하기
df["mpg"].agg(["skew", "kurt"])

# boxplot 으로 mpg 의 사분위 수 표현하기
sns.boxplot(data= df, x = "mpg")

# describe 로 mpg의 기술통계 값 구하기
df["mpg"].describe()

# violinplot 으로 mpg 값 좀 더 자세히 보기
sns.violinplot(data = df, x="mpg")

"""### boxplot과 kdeplot"""

# boxplot 으로 전체 변수 시각화하기
sns.boxplot(data= df, x = "mpg" )

# viloinplot 으로 전체 변수 시각화하기
sns.violinplot(data= df, x = "mpg" )

"""### 2개 이상의 수치변수"""

# scatterplot 을 통해 2개의 수치변수 비교하기
sns.scatterplot(data = df, x = "weight", y = "mpg", hue = "origin")

"""### 회귀 시각화"""

# regplot 으로 회귀선 그리기
sns.regplot(data = df, x = "weight", y = "mpg")

"""### 잔차 시각화"""

# 회귀선의 잔차를 시각화 하기
sns.residplot(data = df, x = "weight", y = "mpg")

# lmplot 을 통해 범주값에 따라 색상, 서브플롯 그리기
sns.lmplot(data = df, x = "weight", y = "mpg", hue = "origin", col = "origin", truncate= 'false')

# jointplot 2개의 수치변수 표현하기
sns.jointplot(data = df, x = "weight", y = "mpg", kind = "hex")

"""### pairplot"""

# pairplot 은 시간이 오래 걸리기 때문에 일부 샘플을 추출해 그려보고(100개)
# 샘플의 수를 늘려가며 그리는 걸 추천합니다.
df_sample = df.sample(100)
df_sample.shape

# origin 값에 따라 다른 색상으로 그리기
sns.pairplot(data = df_sample, hue = "origin")

"""### lineplot"""

sns.scatterplot(data = df, x = "model_year", y = "mpg")

# lineplot으로 model_year, mpg를 시각화 합니다.
sns.lineplot(data = df, x = "model_year", y = "mpg", ci=None)

# relplot 으로 수치 변수에 따라 서브플롯을 그립니다.
sns.relplot(data = df, x = "model_year", y = "mpg", col="origin", hue = "origin")

# relplot 으로 전체 수치 변수에 대한 시각화를 합니다.
sns.relplot(data = df)

# relplot 의  kind 옵션을 통해 선그래프를 그립니다.
sns.relplot(data = df, x = "model_year", y = "mpg", col="origin", hue = "origin", kind = "line", ci = None)

"""
### 상관분석

상관 분석(相關 分析, Correlation analysis) 또는 '상관관계' 또는 '상관'은 확률론과 통계학에서 두 변수간에 어떤 선형적 또는 비선형적 관계를 갖고 있는지를 분석하는 방법이다. 두 변수는 서로 독립적인 관계이거나 상관된 관계일 수 있으며 이때 두 변수간의 관계의 강도를 상관관계(Correlation, Correlation coefficient)라 한다. 상관분석에서는 상관관계의 정도를 나타내는 단위로 모상관계수로 ρ를 사용하며 표본 상관 계수로 r 을 사용한다.

상관관계의 정도를 파악하는 상관 계수(相關係數, Correlation coefficient)는 두 변수간의 연관된 정도를 나타낼 뿐 인과관계를 설명하는 것은 아니다. 두 변수간에 원인과 결과의 인과관계가 있는지에 대한 것은 회귀분석을 통해 인과관계의 방향, 정도와 수학적 모델을 확인해 볼 수 있다.

* 출처 : https://ko.wikipedia.org/wiki/%EC%83%81%EA%B4%80_%EB%B6%84%EC%84%9D

#### 피어슨 상관계수

* r 값은 X 와 Y 가 완전히 동일하면 +1, 전혀 다르면 0, 반대방향으로 완전히 동일 하면 –1 을 가진다. 
* 결정계수(coefficient of determination)는 r^2 로 계산하며 이것은 X 로부터 Y 를 예측할 수 있는 정도를 의미한다.

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Correlation_examples2.svg/800px-Correlation_examples2.svg.png" width="500">

```
일반적으로
r이 -1.0과 -0.7 사이이면, 강한 음적 선형관계,
r이 -0.7과 -0.3 사이이면, 뚜렷한 음적 선형관계,
r이 -0.3과 -0.1 사이이면, 약한 음적 선형관계,
r이 -0.1과 +0.1 사이이면, 거의 무시될 수 있는 선형관계,
r이 +0.1과 +0.3 사이이면, 약한 양적 선형관계,
r이 +0.3과 +0.7 사이이면, 뚜렷한 양적 선형관계,
r이 +0.7과 +1.0 사이이면, 강한 양적 선형관계
```

<img src="https://upload.wikimedia.org/wikipedia/commons/3/34/Correlation_coefficient.png" width=500>

* 출처 :  https://ko.wikipedia.org/wiki/%EC%83%81%EA%B4%80_%EB%B6%84%EC%84%9D#%ED%94%BC%EC%96%B4%EC%8A%A8_%EC%83%81%EA%B4%80_%EA%B3%84%EC%88%98



#### 상관계수 구하기"""

# 데이터프레임 전체의 수치변수에 대해 상관계수를 구합니다.
corr = df.corr()
corr

# np.triu : matrix를 상삼각행렬로 만드는 numpy math
# [1 2 3]   np.triu  [1 2 3]
# [4 5 6]   -------> [0 5 6]
# [2 3 4]            [0 0 4]
# np.ones_like(x) : x와 크기만 같은 1로 이루어진 array를 생성

# 수식적으로 어려워 보일수도 있지만 간단함
# 자기상관계수는 대각행렬을 기준으로 대칭되어 같은 값이 출력되므로,
# 이대로 전체를 heatmap을 plot하면 오히려 가독성이 떨어질 수 있음
# 이에, 가독성을 높이기 위해 대각행렬 기준으로 한쪽의 데이터들만 masking 기법을 통해 plot하여 
# 가독성을 높이는 효과를 가질수 있음
# np.ones_like로 heatmap의 마스크값 구하기
mask = np.triu(np.ones_like(corr))
mask

print(plt.colormaps())

# heatmap 을 통해 상관계수를 시각화 합니다.
sns.heatmap(corr, annot = True, cmap = "coolwarm", vmax = 1, vmin = -1, mask = mask)

